---
description: Расширенные стандарты кодирования для frontend разработки
globs: ["**/*.vue", "**/*.ts", "**/*.js"]
alwaysApply: false
---

# Расширенные стандарты frontend разработки

## Vue.js 3 требования
- **ОБЯЗАТЕЛЬНО**: используй Tailwind 4+ и `<script setup lang="ts">` для всех компонентов
- Применяй Composition API для логики компонента
- Используй vue-router для маршрутизации и Pinia для управления состоянием

## Дополнительные правила именования
- **Приватные переменные**: `p_camelCase` (разумно, без усложнений!)

## TypeScript строгие требования
- Избегай `any`, если не абсолютно необходимо
- Используй интерфейсы для описания структур данных
- Создавай типы для всех API ответов

## Комментарии и документация
- **ВАЖНО**: используй JSDoc для функций и интерфейсов
- Объясняй **ПРИЧИНЫ** кода, а не действия

### Пример правильного JSDoc:

```typescript
/**
 * Получает данные пользователя по ID
 * @param _userId - уникальный идентификатор пользователя
 * @returns Promise с данными пользователя
 * @throws UserNotFoundError если пользователь не найден
 */
async function getUserAsync(_userId: number): Promise<User> {
  // Используем кеш для частых запросов (причина)
  const cached = this.p_cache.get(_userId);
  if (cached) return cached;
  
  try {
    return await this.apiService.getUser(_userId);
  } catch (error) {
    throw new UserNotFoundError(`Пользователь ${_userId} не найден`);
  }
}
```

## Читаемость и качество кода
- Код должен быть понятен другим разработчикам
- Избегай сложных конструкций без необходимости
- Используй говорящие имена переменных и функций
- **ВАЖНО**: Код должен быть легко читаемым
