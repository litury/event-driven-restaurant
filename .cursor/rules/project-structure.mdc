---
description: Соглашения о структуре проектов для frontend разработки
globs: ["**/src/**/*", "**/modules/**/*", "**/components/**/*"]
alwaysApply: false
---

# Соглашения о структуре проектов

## Общие требования

### Иерархия файлов и директорий
- Файлы должны располагаться на самом глубоком уровне, где они используются
- Не размещать файлы в корне проекта без крайней необходимости
- Структура должна отражать логическую архитектуру проекта

### Названия в терминах предметной области
- Используй термины, понятные команде разработки
- Названия должны отражать бизнес-логику и назначение

### Разделение файлов по типам

**Основные директории:**
- `components/` - переиспользуемые Vue компоненты
- `modules/` - логически сгруппированная функциональность
- `services/` - сервисы для работы с API и бизнес-логикой
- `shared/` - общие компоненты и утилиты
- `interfaces/` - TypeScript интерфейсы и типы
- `helpers/` - вспомогательные функции
- `parts/` - внутренние реализации (НЕ в корне!)

### Ограничения
- Не более 7-10 файлов в одной папке
- При превышении - создавать поддиректории

## Именование файлов (Frontend)

### JavaScript/TypeScript
- Файлы и директории: `camelCase`
- Обязательные `index.ts` файлы в каждой папке

### Vue компоненты
- Именование: `PascalCase.vue`
- Примеры: `UserProfile.vue`, `OrderSummary.vue`

### Пример структуры

```
src/
├── modules/
│   ├── userModule/
│   │   ├── UserProfile.vue
│   │   ├── userService.ts
│   │   ├── parts/
│   │   │   ├── userHelpers.ts
│   │   │   └── internalLogic.ts
│   │   └── index.ts
├── shared/
│   ├── components/
│   └── helpers/
├── interfaces/
│   ├── IUserService.ts
└── services/
    ├── apiService.ts
```
