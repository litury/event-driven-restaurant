# Git Workflow 

## Именование веток

### Основные типы веток:

- `feature/task-number-and-name` - новый функционал
- `bugfix/task-number-and-name` - исправление ошибок
- `hotfix/task-number-and-name` - экстренные исправления

### Примеры веток:

- `feature/KN-25-authorization-module`
- `bugfix/MS-456-fix-auth-error`
- `hotfix/CRITICAL-123-security-patch`

## Формат commit сообщений

### Шаблон:

```
verb (scope): details
```

### Обязательные компоненты:

1. **verb** - глагол в нижнем регистре (например: `fix`, `feat`, `add`)
2. **(scope)** - область изменений (например: `(auth)`, `(UI)`, `(backend)`)
3. **details** - краткое описание на русском языке

### Стандартные глаголы:

- `add` - новые элементы
- `feat` - новая функция
- `fix` - исправление
- `chore` - вспомогательные изменения
- `refactor` - рефакторинг
- `docs` - документация
- `style` - правки стиля кода
- `cleanup`/`clean` - очистка/удаление лишнего
- `up` - обновление
- `improve` - улучшение
- `optimize`/`opt` - оптимизация

### Примеры commit сообщений:

```
[TASK-2345] fix (auth): Исправил баг с аутентификацией пользователей
[TASK-6789] feat (UI): Добавил новый компонент отображения профиля
[TASK-1234,TASK-5678] refactor (backend): Оптимизировал запросы к базе данных
[KN-25] add (git): добавил .gitignore
[MS-456] feat (auth): добавил OAuth поддержку
```

### Множественные задачи:

```
# Вариант 1 - через запятую:
[KN-25, KN-27] feature (auth-module): победил stack overflow

# Вариант 2 - многострочный:
[KN-25] feature (auth-module): добавил авторизацию
[KN-26] feature (auth-module): добавил валидацию данных
```

## Версионирование (SemVer)

### Правила увеличения версий:

- **Мажорная (X.y.z)** - обратно несовместимые изменения
- **Минорная (x.Y.z)** - новая обратно совместимая функциональность
- **Патч (x.y.Z)** - исправления багов (редко используется)

### Примеры веток разработки:

- `dev/1.0` - разработка версии 1.0
- `dev/2.1` - разработка версии 2.1

## Общие требования

### Качество коммитов:

- Один коммит = одна логическая единица изменений
- Избегайте мега-коммитов (90+ файлов)
- Разделяйте функционал, рефакторинг и хотфиксы
- Все коммиты должны содержать осмысленные комментарии

### Пользователь Git:

- Используйте реальное имя на английском (например: "Alexander Sh.")
- Настройте корректный email

### Стратегия работы с ветками:

1. Ведите правки в отдельной ветке
2. Подтягивайте изменения из основной ветки
3. Вливайте в основную ветку только при отсутствии конфликтов

### SSH доступ:

- Используйте SSH ключи для доступа к репозиториям
- Избегайте HTTPS для повседневной работы

## Работа с внешними командами

### Процесс для изменений в чужом проекте:

1. Создайте приватный форк репозитория
2. Создайте новую ветку в форке
3. Зафиксируйте изменения
4. Создайте Merge Request
5. Уведомите основную команду
6. Ждите подтверждения слияния

## Git LFS

### Используйте для больших файлов:

- Медиафайлы: `*.mp4`, `*.mov`, `*.mkv`, `*.mp3`
- Изображения: `*.jpg`, `*.png`, `*.psd`
- Документы: `*.pdf`
- И другие бинарные файлы большого размера

---
description: Git workflow - именование веток, формат коммитов, версионирование
globs:
  - "**/.git/**"
  - "**/.gitignore"
  - "**/CHANGELOG.md"
  - "**/VERSION"
  - "**/.gitattributes"
  - "**/commit-msg"
  - "**/pre-commit"
  - "**/post-commit"
alwaysApply: false
---
