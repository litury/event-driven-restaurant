import { describe, it, expect, beforeEach, afterEach } from 'vitest'
import { RestaurantZoneAPI } from '../services/restaurantZoneAPI'
import { KitchenChangeLog } from '../services/kitchenChangeLog'
import { RestaurantZoneSync } from '../services/restaurantZoneSync'
import {
  IRestaurantSyncConfig,
  RestaurantChangeEvent
} from '../interfaces/IRestaurantSyncModel'

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π –î–ó-3
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ
 */

describe('üèÜ RestaurantSync Real - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏', () => {
  let restaurantAPI: RestaurantZoneAPI
  let kitchenLog: KitchenChangeLog
  let zoneSync: RestaurantZoneSync
  let config: IRestaurantSyncConfig

  beforeEach(() => {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = {
      maxEventsInMemory: 100,
      syncIntervalMs: 50,
      enableDetailedLogging: false, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      zoneSettings: {
        vip: {
          maxTables: 3,
          tableNumbers: [101, 102, 103],
          specialFeatures: ['champagne_service', 'personal_waiter']
        },
        regular: {
          maxTables: 5,
          tableNumbers: [1, 2, 3, 4, 5]
        },
        takeaway: {
          maxOrders: 10,
          averageWaitTime: 15 * 60 * 1000
        }
      },
      autoCleanup: {
        enabled: false,
        keepLastN: 50,
        intervalMs: 60000
      }
    }

    // –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    restaurantAPI = new RestaurantZoneAPI()
    kitchenLog = new KitchenChangeLog(config.maxEventsInMemory)
    zoneSync = new RestaurantZoneSync(config)

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤—è–∑–∫–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    setupEventFlow()
  })

  afterEach(() => {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    restaurantAPI.clearAll()
    kitchenLog.clearAll()
    zoneSync.clearAll()
  })

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
   */
  function setupEventFlow() {
    // RestaurantAPI ‚Üí KitchenLog ‚Üí ZoneSync
    restaurantAPI.onOrderChange(async (event: RestaurantChangeEvent) => {
      await kitchenLog.append(event)
    })

    kitchenLog.onNewEvent(async (event: RestaurantChangeEvent) => {
      await zoneSync.processOrderEvent(event)
    })
  }

  // ==========================================
  // üîó –¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  // ==========================================

  describe('üîó –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ ‚Üí VIP –ø–æ–≤—ã—à–µ–Ω–∏–µ ‚Üí –ø–æ–¥–∞—á–∞', async () => {
      // 1. –°–æ–∑–¥–∞—ë–º –æ–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
      const order = await restaurantAPI.addOrder({
        isVipCustomer: false,
        dishDescription: '–°—Ç–µ–π–∫ —Å –æ–≤–æ—â–∞–º–∏',
        status: 'pending' as const,
        tableNumber: 1
      })

      // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â—ë–Ω –≤ –æ–±—ã—á–Ω–æ–π –∑–æ–Ω–µ
      let zoneState = await zoneSync.getZoneState(order.orderId)
      expect(zoneState?.zoneType).toBe('regular')
      expect(zoneState?.tableNumber).toBeGreaterThanOrEqual(1)
      expect(zoneState?.tableNumber).toBeLessThanOrEqual(5)

      // 2. –ü–æ–≤—ã—à–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ VIP
      await restaurantAPI.modifyOrderField(order.orderId, 'isVipCustomer', true)
      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ VIP –∑–æ–Ω—É
      zoneState = await zoneSync.getZoneState(order.orderId)
      expect(zoneState?.zoneType).toBe('vip')
      expect(zoneState?.tableNumber).toBeGreaterThanOrEqual(101)
      expect(zoneState?.tableNumber).toBeLessThanOrEqual(103)

      // 3. –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await restaurantAPI.changeOrderStatus(order.orderId, 'preparing')
      await restaurantAPI.changeOrderStatus(order.orderId, 'ready')
      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏–ª—Å—è
      zoneState = await zoneSync.getZoneState(order.orderId)
      expect(zoneState?.placementStatus).toBe('ready_for_service')

      // 4. –ü–æ–¥–∞—ë–º –±–ª—é–¥–æ (—É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑)
      await restaurantAPI.removeOrder(order.orderId, 'served')
      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω –∏–∑ –∑–æ–Ω—ã
      zoneState = await zoneSync.getZoneState(order.orderId)
      expect(zoneState).toBeNull()

      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
      const allEvents = await kitchenLog.getEventsByOrderId(order.orderId)
      expect(allEvents.length).toBeGreaterThanOrEqual(4) // add, modify, status changes, remove

      const eventTypes = allEvents.map(e => e.type)
      expect(eventTypes).toContain('order_added')
      expect(eventTypes).toContain('order_modified')
      expect(eventTypes).toContain('status_changed')
      expect(eventTypes).toContain('order_removed')
    })

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ VIP –∑–∞–∫–∞–∑—ã', async () => {
      // –°–æ–∑–¥–∞—ë–º 3 VIP –∑–∞–∫–∞–∑–∞ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ VIP —Å—Ç–æ–ª—ã)
      const vipOrders = []
      for (let i = 1; i <= 3; i++) {
        const order = await restaurantAPI.addOrder({
          isVipCustomer: true,
          dishDescription: `VIP –±–ª—é–¥–æ ${i}`,
          status: 'pending' as const
        })
        vipOrders.push(order)
      }

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ VIP —Å—Ç–æ–ª—ã –∑–∞–Ω—è—Ç—ã
      const availableVipTables = await zoneSync.getAvailableTables('vip')
      expect(availableVipTables).toHaveLength(0)

      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω VIP –∑–∞–∫–∞–∑
      const extraVipOrder = await restaurantAPI.addOrder({
        isVipCustomer: true,
        dishDescription: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π VIP –∑–∞–∫–∞–∑',
        status: 'pending' as const
      })

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω
      const extraZoneState = await zoneSync.getZoneState(extraVipOrder.orderId)
      expect(extraZoneState).toBeNull()

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ–¥–∏–Ω VIP —Å—Ç–æ–ª
      await restaurantAPI.removeOrder(vipOrders[0].orderId, 'served')
      await new Promise(resolve => setTimeout(resolve, 100))

      // –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π VIP —Å—Ç–æ–ª
      const availableAfterRemoval = await zoneSync.getAvailableTables('vip')
      expect(availableAfterRemoval).toHaveLength(1)
    })

    it('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ VIP —Å—Ç–∞—Ç—É—Å–∞', async () => {
      // –°–æ–∑–¥–∞—ë–º –æ–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
      const regularOrder = await restaurantAPI.addOrder({
        isVipCustomer: false,
        dishDescription: '–û–±—ã—á–Ω—ã–π —Å–∞–ª–∞—Ç',
        status: 'pending' as const
      })

      // –°–æ–∑–¥–∞—ë–º VIP –∑–∞–∫–∞–∑
      const vipOrder = await restaurantAPI.addOrder({
        isVipCustomer: true,
        dishDescription: 'VIP —Å—É–ø',
        status: 'pending' as const
      })

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
      let regularZone = await zoneSync.getZoneState(regularOrder.orderId)
      let vipZone = await zoneSync.getZoneState(vipOrder.orderId)

      expect(regularZone?.zoneType).toBe('regular')
      expect(vipZone?.zoneType).toBe('vip')

      // –ú–µ–Ω—è–µ–º –æ–±—ã—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ VIP
      await restaurantAPI.modifyOrderField(regularOrder.orderId, 'isVipCustomer', true)

      // –£–±–∏—Ä–∞–µ–º VIP —Å—Ç–∞—Ç—É—Å —É VIP –∫–ª–∏–µ–Ω—Ç–∞
      await restaurantAPI.modifyOrderField(vipOrder.orderId, 'isVipCustomer', false)

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –∑–æ–Ω–∞–º–∏
      regularZone = await zoneSync.getZoneState(regularOrder.orderId)
      vipZone = await zoneSync.getZoneState(vipOrder.orderId)

      expect(regularZone?.zoneType).toBe('vip')   // –ë—ã–ª regular, —Å—Ç–∞–ª VIP
      expect(vipZone?.zoneType).toBe('regular')   // –ë—ã–ª VIP, —Å—Ç–∞–ª regular
    })

    it('–¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—ã—Ç–∏—è–º', async () => {
      // –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
      const order1 = await restaurantAPI.addOrder({
        isVipCustomer: true,
        dishDescription: '–ë–ª—é–¥–æ 1',
        status: 'pending' as const
      })

      const order2 = await restaurantAPI.addOrder({
        isVipCustomer: false,
        dishDescription: '–ë–ª—é–¥–æ 2',
        status: 'pending' as const
      })

      await restaurantAPI.changeOrderStatus(order1.orderId, 'preparing')
      await restaurantAPI.modifyOrderField(order2.orderId, 'dishDescription', '–ë–ª—é–¥–æ 2 –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ')
      await restaurantAPI.removeOrder(order1.orderId, 'cancelled')

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
      const stats = await kitchenLog.getEventsStats()

      expect(stats.total).toBeGreaterThanOrEqual(5)
      expect(stats.byType.order_added).toBe(2)
      expect(stats.byType.status_changed).toBe(1)
      expect(stats.byType.order_modified).toBe(1)
      expect(stats.byType.order_removed).toBe(1)

      expect(stats.byInitiator.customer).toBeGreaterThan(0)
      expect(stats.byInitiator.chef).toBeGreaterThan(0)
      expect(stats.byInitiator.waiter).toBeGreaterThan(0)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –∑–∞–∫–∞–∑–∞—Ö', async () => {
      // –ó–∞–∫–∞–∑ —Å –æ—Å–æ–±—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
      const specialOrder = await restaurantAPI.addOrder({
        isVipCustomer: false,
        dishDescription: '–ü–∏—Ü—Ü–∞ –±–µ–∑ –ª—É–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å—ã—Ä–æ–º',
        status: 'pending' as const
      })

      // –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑
      const normalOrder = await restaurantAPI.addOrder({
        isVipCustomer: false,
        dishDescription: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∏—Ü—Ü–∞',
        status: 'pending' as const
      })

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
      const specialZone = await zoneSync.getZoneState(specialOrder.orderId)
      const normalZone = await zoneSync.getZoneState(normalOrder.orderId)

      expect(specialZone?.metadata.hasSpecialRequests).toBe(true)
      expect(normalZone?.metadata.hasSpecialRequests).toBe(false)

      // –ó–∞–∫–∞–∑ —Å –æ—Å–æ–±—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
      expect(specialZone?.metadata.estimatedServiceTime).toBeGreaterThan(
        normalZone?.metadata.estimatedServiceTime || 0
      )
    })

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—á–∏—â–∞—Ç—å –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π', async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π
      for (let i = 1; i <= 15; i++) {
        await restaurantAPI.addOrder({
          isVipCustomer: i % 2 === 0,
          dishDescription: `–ë–ª—é–¥–æ ${i}`,
          status: 'pending' as const
        })
      }

      await new Promise(resolve => setTimeout(resolve, 100))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
      let eventCount = await kitchenLog.getEventCount()
      expect(eventCount).toBe(15)

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
      await kitchenLog.cleanup(5)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ 5 —Å–æ–±—ã—Ç–∏–π
      eventCount = await kitchenLog.getEventCount()
      expect(eventCount).toBe(5)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
      const recentEvents = await kitchenLog.getRecentEvents(5)
      expect(recentEvents).toHaveLength(5)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏—è —Å –±–æ–ª—å—à–∏–º–∏ ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ)
      const minEventId = Math.min(...recentEvents.map(e => e.eventId))
      expect(minEventId).toBeGreaterThan(10) // –î–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏—è 11-15
    })
  })

  // ==========================================
  // üìä –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
  // ==========================================

  describe('üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–∫–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã—Å–æ–∫—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–æ–≤', async () => {
      const startTime = Date.now()
      const orderCount = 50

      // –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const promises = []
      for (let i = 1; i <= orderCount; i++) {
        promises.push(
          restaurantAPI.addOrder({
            isVipCustomer: i % 3 === 0, // –ö–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π VIP
            dishDescription: `–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ ${i}`,
            status: 'pending' as const
          })
        )
      }

      const orders = await Promise.all(promises)
      await new Promise(resolve => setTimeout(resolve, 200)) // –í—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

      const endTime = Date.now()
      const processingTime = endTime - startTime

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã
      expect(orders).toHaveLength(orderCount)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
      const eventCount = await kitchenLog.getEventCount()
      expect(eventCount).toBe(orderCount)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
      const zoneStats = await zoneSync.getZoneStatistics()
      expect(zoneStats.vip.occupied + zoneStats.regular.occupied).toBeGreaterThan(0)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ)
      expect(processingTime).toBeLessThan(5000) // –ú–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥

      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${orderCount} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ ${processingTime}–º—Å`)
    })
  })
})


