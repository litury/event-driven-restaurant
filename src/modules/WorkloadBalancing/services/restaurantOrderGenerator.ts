import type { IEventQueue, IWorkItem, IRestaurantOrder } from '../interfaces'

/**
 * –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */
export type GeneratorMode = 'legacy' | 'restaurant'

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
 */
export interface IRestaurantOrderGeneratorConfig {
  /** –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã - legacy (—á–∏—Å–ª–∞) –∏–ª–∏ restaurant (–ø–æ–ª–Ω—ã–µ –∑–∞–∫–∞–∑—ã) */
  mode: GeneratorMode
  /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–º—Å) */
  intervalMs: number
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ */
  maxOrders: number
  /** –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è restaurant —Ä–µ–∂–∏–º–∞) */
  enablePriorities: boolean
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 */
export class RestaurantOrderFactory {
  private orderCounter = 1

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–∫–∞–∑ (legacy mode)
   */
  createLegacyOrder(): IWorkItem {
    return this.orderCounter++
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
   */
  createRestaurantOrder(): IRestaurantOrder {
    const now = new Date()
    const orderNumber = this.orderCounter++

    // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
    const customerTypes: IRestaurantOrder['customerType'][] = ['VIP', '–æ–±—ã—á–Ω—ã–π', '–¥–æ—Å—Ç–∞–≤–∫–∞']
    const dishTypes: IRestaurantOrder['dishType'][] = ['–ø–∏—Ü—Ü–∞', '–±—É—Ä–≥–µ—Ä', '—Å–∞–ª–∞—Ç', '–¥–µ—Å–µ—Ä—Ç']
    const complexities: IRestaurantOrder['complexity'][] = ['–ø—Ä–æ—Å—Ç–æ–µ', '—Å—Ä–µ–¥–Ω–µ–µ', '—Å–ª–æ–∂–Ω–æ–µ']

    const customerType = customerTypes[Math.floor(Math.random() * customerTypes.length)]
    const dishType = dishTypes[Math.floor(Math.random() * dishTypes.length)]
    const complexity = complexities[Math.floor(Math.random() * complexities.length)]

    // –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø–∞ –±–ª—é–¥–∞
    const baseTime = this.getBaseCookingTime(dishType, complexity)
    const estimatedCookingTimeMs = baseTime + Math.random() * 1000 // ¬±1—Å–µ–∫ –≤–∞—Ä–∏–∞—Ü–∏—è

    // Deadline –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const deadlineOffset = this.getDeadlineOffset(customerType, complexity)
    const deadline = new Date(now.getTime() + deadlineOffset)

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const priority = this.calculateInitialPriority(customerType, complexity, deadlineOffset, estimatedCookingTimeMs)

    return {
      orderNumber,
      customerType,
      dishType,
      complexity,
      estimatedCookingTimeMs,
      estimatedProcessingTimeMs: estimatedCookingTimeMs, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      deadline,
      enqueuedAt: now,
      specialRequests: this.generateSpecialRequests(customerType),
      priority
    }
  }

  /**
   * –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –±–ª—é–¥–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
   */
  private getBaseCookingTime(dishType: IRestaurantOrder['dishType'], complexity: IRestaurantOrder['complexity']): number {
    const baseTimes = {
      '–ø–∏—Ü—Ü–∞': { '–ø—Ä–æ—Å—Ç–æ–µ': 2000, '—Å—Ä–µ–¥–Ω–µ–µ': 3000, '—Å–ª–æ–∂–Ω–æ–µ': 4500 },
      '–±—É—Ä–≥–µ—Ä': { '–ø—Ä–æ—Å—Ç–æ–µ': 1500, '—Å—Ä–µ–¥–Ω–µ–µ': 2500, '—Å–ª–æ–∂–Ω–æ–µ': 3500 },
      '—Å–∞–ª–∞—Ç': { '–ø—Ä–æ—Å—Ç–æ–µ': 1000, '—Å—Ä–µ–¥–Ω–µ–µ': 1500, '—Å–ª–æ–∂–Ω–æ–µ': 2000 },
      '–¥–µ—Å–µ—Ä—Ç': { '–ø—Ä–æ—Å—Ç–æ–µ': 1200, '—Å—Ä–µ–¥–Ω–µ–µ': 2000, '—Å–ª–æ–∂–Ω–æ–µ': 3000 }
    }

    return baseTimes[dishType][complexity]
  }

  /**
   * –í—Ä–µ–º—è –¥–æ deadline –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private getDeadlineOffset(customerType: IRestaurantOrder['customerType'], complexity: IRestaurantOrder['complexity']): number {
    const baseOffset = complexity === '—Å–ª–æ–∂–Ω–æ–µ' ? 15000 : complexity === '—Å—Ä–µ–¥–Ω–µ–µ' ? 10000 : 7000

    switch (customerType) {
      case 'VIP': return baseOffset * 0.7 // VIP —Ö–æ—Ç—è—Ç –±—ã—Å—Ç—Ä–µ–µ
      case '–¥–æ—Å—Ç–∞–≤–∫–∞': return baseOffset * 1.5 // –î–æ—Å—Ç–∞–≤–∫–∞ –º–æ–∂–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
      default: return baseOffset // –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    }
  }

  /**
   * –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  private calculateInitialPriority(
    customerType: IRestaurantOrder['customerType'],
    complexity: IRestaurantOrder['complexity'],
    deadlineOffset: number,
    estimatedTime: number
  ): number {
    // –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: (–≤—Ä–µ–º—è –¥–æ deadline) / (–≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è)
    let priority = deadlineOffset / estimatedTime

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –∫–ª–∏–µ–Ω—Ç–∞
    if (customerType === 'VIP') priority *= 0.5 // –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç VIP
    if (customerType === '–¥–æ—Å—Ç–∞–≤–∫–∞') priority *= 1.2 // –ü–æ–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏

    return Math.round(priority * 100) / 100 // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
   */
  private generateSpecialRequests(customerType: IRestaurantOrder['customerType']): string[] {
    if (customerType !== 'VIP') return []

    const vipRequests = [
      '–ë–µ–∑ –ª—É–∫–∞',
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—ã—Ä',
      '–û—Å—Ç—Ä—ã–π —Å–æ—É—Å',
      '–•—Ä—É—Å—Ç—è—â–∞—è –∫–æ—Ä–æ—á–∫–∞',
      '–ü–æ–¥–∞—Ç—å –≥–æ—Ä—è—á–∏–º'
    ]

    // VIP –º–æ–∂–µ—Ç –∏–º–µ—Ç—å 0-2 —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    const count = Math.floor(Math.random() * 3)
    const shuffled = vipRequests.sort(() => 0.5 - Math.random())
    return shuffled.slice(0, count)
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
   */
  reset(): void {
    this.orderCounter = 1
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç legacy —Ä–µ–∂–∏–º (–ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞) –∏ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø–æ–ª–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
 */
export function createRestaurantOrderGenerator(
  workQueue: IEventQueue<IWorkItem>,
  restaurantQueue: IEventQueue<IRestaurantOrder> | null,
  config: IRestaurantOrderGeneratorConfig
) {
  const factory = new RestaurantOrderFactory()
  let intervalId: NodeJS.Timeout | null = null
  let ordersGenerated = 0

  return {
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤
     */
    async startAsync(): Promise<void> {
      if (intervalId) return

      intervalId = setInterval(async () => {
        if (ordersGenerated >= config.maxOrders) {
          await this.stopAsync()
          return
        }

        try {
          if (config.mode === 'legacy') {
            // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
            const workItem = factory.createLegacyOrder()
            await workQueue.enqueueAsync(workItem)

            // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Å—Ç–∏–ª–µ
            console.log(`üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã: ${workItem}`)
          } else {
            // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            const restaurantOrder = factory.createRestaurantOrder()

            // –ö–ª–∞–¥–µ–º –≤ –æ–±–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await workQueue.enqueueAsync(restaurantOrder.orderNumber)
            if (restaurantQueue) {
              await restaurantQueue.enqueueAsync(restaurantOrder)
            }

            // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
            console.log(`üçΩÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: ${this.formatOrderLog(restaurantOrder)}`)
          }

          ordersGenerated++
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:', error)
        }
      }, config.intervalMs)
    },

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤
     */
    async stopAsync(): Promise<void> {
      if (intervalId) {
        clearInterval(intervalId)
        intervalId = null
      }
    },

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    getStats() {
      return {
        ordersGenerated,
        maxOrders: config.maxOrders,
        isRunning: intervalId !== null,
        mode: config.mode
      }
    },

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
     */
    reset(): void {
      factory.reset()
      ordersGenerated = 0
    },

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥ –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
     */
    formatOrderLog(order: IRestaurantOrder): string {
      const urgency = order.customerType === 'VIP' ? '‚≠ê' : order.priority < 2 ? 'üî•' : ''
      return `${urgency} #${order.orderNumber} ${order.dishType} (${order.customerType}, ${order.complexity}) - –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ~${Math.round(order.estimatedCookingTimeMs / 1000)}—Å`
    }
  }
} 