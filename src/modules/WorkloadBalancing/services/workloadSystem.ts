import { createEventQueue } from '../../../shared/infrastructure'
import type {
    IEventQueue,
    IWorkItem,
    IWorkerFreeEvent,
    IWorkAssignment,
    IWorkResult
} from '../interfaces'
import {
    createZipProcessorAsync,
    createFilterProcessorAsync,
    createWorkerProcessorAsync,
    createWorkGeneratorAsync
} from './workloadProcessors'

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã
 */
export interface IWorkloadSystemConfig {
    /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
    workGenerationIntervalMs: number
    /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç */
    maxWorks: number
    /** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º—É */
    autoStart: boolean
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã
 */
export interface IWorkloadSystemState {
    /** –ó–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ */
    isRunning: boolean
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç */
    generatedWorks: number
    /** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç */
    processedWorks: number
    /** –í—Å–µ –æ—á–µ—Ä–µ–¥–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ */
    queues: {
        workQueue: IEventQueue<IWorkItem>
        freeWorkersQueue: IEventQueue<IWorkerFreeEvent>
        assignmentQueue: IEventQueue<IWorkAssignment>
        worker1Queue: IEventQueue<IWorkItem>
        worker2Queue: IEventQueue<IWorkItem>
        resultQueue: IEventQueue<IWorkResult>
    }
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã
 * –ê–≤—Ç–æ—Ä: "–°–∏—Å—Ç–µ–º–∞ –∏–∑ 4 —É—á–∞—Å—Ç–∫–æ–≤ —Å 5 –æ—á–µ—Ä–µ–¥—è–º–∏ —Å–æ–±—ã—Ç–∏–π"
 */
export class WorkloadSystem {
    private p_config: IWorkloadSystemConfig
    private p_state: IWorkloadSystemState
    private p_workGenerator: ReturnType<typeof createWorkGeneratorAsync> | null = null
    private p_processingLoops: Promise<void>[] = []
    private p_shouldStop = false

    constructor(_config: Partial<IWorkloadSystemConfig> = {}) {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.p_config = {
            workGenerationIntervalMs: 800, // –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!
            maxWorks: 200, // –ë–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤!
            autoStart: false,
            ..._config
        }

        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ 5 –æ—á–µ—Ä–µ–¥–µ–π —Å–∏—Å—Ç–µ–º—ã
        this.p_state = {
            isRunning: false,
            generatedWorks: 0,
            processedWorks: 0,
            queues: {
                workQueue: createEventQueue<IWorkItem>(),
                freeWorkersQueue: createEventQueue<IWorkerFreeEvent>(),
                assignmentQueue: createEventQueue<IWorkAssignment>(),
                worker1Queue: createEventQueue<IWorkItem>(),
                worker2Queue: createEventQueue<IWorkItem>(),
                resultQueue: createEventQueue<IWorkResult>()
            }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (this.p_config.autoStart) {
            this.startAsync()
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã
     */
    async startAsync(): Promise<void> {
        if (this.p_state.isRunning) {
            return
        }

        this.p_state.isRunning = true
        this.p_shouldStop = false

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏—Ö –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
        await this.p_state.queues.freeWorkersQueue.enqueueAsync(1)
        await this.p_state.queues.freeWorkersQueue.enqueueAsync(2)

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç
        this.p_workGenerator = createWorkGeneratorAsync(
            this.p_state.queues.workQueue,
            this.p_config.workGenerationIntervalMs,
            this.p_config.maxWorks
        )
        await this.p_workGenerator.startAsync()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–∞—Ö
        this.p_processingLoops = [
            this.runZipProcessorLoopAsync(),
            this.runFilterProcessorLoopAsync(),
            this.runWorker1ProcessorLoopAsync(),
            this.runWorker2ProcessorLoopAsync()
        ]
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É
     */
    async stopAsync(): Promise<void> {
        if (!this.p_state.isRunning) {
            return
        }

        console.log('üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã...')
        this.p_shouldStop = true
        this.p_state.isRunning = false

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        if (this.p_workGenerator) {
            console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç...')
            await this.p_workGenerator.stopAsync()
            console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤...')
        try {
            await Promise.all(this.p_processingLoops)
            console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:', error)
        }

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
     */
    getState(): Readonly<IWorkloadSystemState> {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        if (this.p_workGenerator) {
            this.p_state.generatedWorks = this.p_workGenerator.getCurrentWorkCount()
        }

        return { ...this.p_state }
    }

    /**
     * –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
     */
    private async runZipProcessorLoopAsync(): Promise<void> {
        while (!this.p_shouldStop) {
            try {
                await createZipProcessorAsync(
                    this.p_state.queues.workQueue,
                    this.p_state.queues.freeWorkersQueue,
                    this.p_state.queues.assignmentQueue
                )
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ ZIP-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ:', error)
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                await new Promise(_resolve => setTimeout(_resolve, 100))
            }
        }
    }

    /**
     * –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
     */
    private async runFilterProcessorLoopAsync(): Promise<void> {
        while (!this.p_shouldStop) {
            try {
                await createFilterProcessorAsync(
                    this.p_state.queues.assignmentQueue,
                    this.p_state.queues.worker1Queue,
                    this.p_state.queues.worker2Queue
                )
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ:', error)
                await new Promise(_resolve => setTimeout(_resolve, 100))
            }
        }
    }

    /**
     * –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ 1
     */
    private async runWorker1ProcessorLoopAsync(): Promise<void> {
        while (!this.p_shouldStop) {
            try {
                await createWorkerProcessorAsync(
                    this.p_state.queues.worker1Queue,
                    this.p_state.queues.freeWorkersQueue,
                    this.p_state.queues.resultQueue,
                    1
                )
                this.p_state.processedWorks++
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º 1:', error)
                await new Promise(_resolve => setTimeout(_resolve, 100))
            }
        }
    }

    /**
     * –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ 2
     */
    private async runWorker2ProcessorLoopAsync(): Promise<void> {
        while (!this.p_shouldStop) {
            try {
                await createWorkerProcessorAsync(
                    this.p_state.queues.worker2Queue,
                    this.p_state.queues.freeWorkersQueue,
                    this.p_state.queues.resultQueue,
                    2
                )
                this.p_state.processedWorks++
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º 2:', error)
                await new Promise(_resolve => setTimeout(_resolve, 100))
            }
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
 */
export const createWorkloadSystem = (_config?: Partial<IWorkloadSystemConfig>): WorkloadSystem => {
    return new WorkloadSystem(_config)
} 