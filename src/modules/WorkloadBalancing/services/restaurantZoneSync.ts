/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∑–æ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 * –î–ó-3: –°–æ–±—ã—Ç–∏–π–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã—Ö –∑–æ–Ω
 */

import {
  IRestaurantZoneSync,
  IRestaurantOrder,
  IRestaurantZoneState,
  RestaurantChangeEvent,
  IRestaurantSyncConfig,
  IOrderAddedEvent,
  IOrderRemovedEvent,
  IOrderModifiedEvent
} from '../interfaces/IRestaurantSyncModel'

/**
 * –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∑–æ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–æ–Ω–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ VIP —Å—Ç–∞—Ç—É—Å—É
 */
export class RestaurantZoneSync implements IRestaurantZoneSync {
  private p_zoneStates = new Map<number, IRestaurantZoneState>()
  private p_occupiedTables = new Set<number>()
  private p_config: IRestaurantSyncConfig

  // –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤
  private p_vipQueue: IRestaurantOrder[] = []
  private p_regularQueue: IRestaurantOrder[] = []

  constructor(config: IRestaurantSyncConfig) {
    this.p_config = config
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
   */
  async processOrderEvent(event: RestaurantChangeEvent): Promise<void> {
    if (this.p_config.enableDetailedLogging) {
      console.log(`[RestaurantZoneSync] üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: ${event.type} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${event.orderId}`)
    }

    switch (event.type) {
      case 'order_added':
        await this.p_handleOrderAdded(event as IOrderAddedEvent)
        break

      case 'order_removed':
        await this.p_handleOrderRemoved(event as IOrderRemovedEvent)
        break

      case 'order_modified':
        await this.p_handleOrderModified(event as IOrderModifiedEvent)
        break

      case 'status_changed':
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–æ–Ω
        await this.p_handleStatusChanged(event)
        break

      default:
        console.warn(`[RestaurantZoneSync] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${event.type}`)
    }
  }

  /**
   * –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–æ–Ω–µ
   */
  async placeOrderInZone(order: IRestaurantOrder): Promise<IRestaurantZoneState> {
    const zoneType = order.isVipCustomer ? 'vip' : 'regular'
    const zoneName = zoneType === 'vip' ? 'VIP' : '–û–ë–´–ß–ù–û–ô'

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª—ã –≤ –Ω—É–∂–Ω–æ–π –∑–æ–Ω–µ
    const availableTables = await this.getAvailableTables(zoneType)

    if (availableTables.length === 0) {
      // –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ - —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
      if (zoneType === 'vip') {
        this.p_vipQueue.push(order)
        if (this.p_config.enableDetailedLogging) {
          console.log(`[RestaurantZoneSync] üèÉ‚Äç‚ôÇÔ∏è –ó–ê–ö–ê–ó #${order.orderId} –í –û–ß–ï–†–ï–î–ò VIP (${this.p_vipQueue.length} –æ–∂–∏–¥–∞—é—Ç) - –≤—Å–µ —Å—Ç–æ–ª—ã –∑–∞–Ω—è—Ç—ã`)
        }
      } else {
        this.p_regularQueue.push(order)
        if (this.p_config.enableDetailedLogging) {
          console.log(`[RestaurantZoneSync] üèÉ‚Äç‚ôÇÔ∏è –ó–ê–ö–ê–ó #${order.orderId} –í –û–ß–ï–†–ï–î–ò –û–ë–´–ß–ù–û–ô (${this.p_regularQueue.length} –æ–∂–∏–¥–∞—é—Ç) - –≤—Å–µ —Å—Ç–æ–ª—ã –∑–∞–Ω—è—Ç—ã`)
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ –æ—á–µ—Ä–µ–¥–∏"
      const queueState: IRestaurantZoneState = {
        orderId: order.orderId,
        zoneType,
        tableNumber: -1, // -1 –æ–∑–Ω–∞—á–∞–µ—Ç "–≤ –æ—á–µ—Ä–µ–¥–∏"
        position: { x: 0, y: 0, section: `${zoneType}_queue` },
        assignedWaiter: '–û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
        placementStatus: 'queued',
        placedAt: new Date(),
        lastUpdatedAt: new Date(),
        metadata: {
          hasSpecialRequests: this.p_hasSpecialRequests(order.dishDescription),
          estimatedServiceTime: this.p_calculateEstimatedServiceTime(order),
          actualServiceTime: undefined,
          queuePosition: zoneType === 'vip' ? this.p_vipQueue.length : this.p_regularQueue.length
        }
      }

      // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ p_zoneStates
      this.p_zoneStates.set(order.orderId, queueState)

      return { ...queueState }
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–æ–ª
    const tableNumber = availableTables[0]
    this.p_occupiedTables.add(tableNumber)

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    if (this.p_config.enableDetailedLogging) {
      console.log(`[RestaurantZoneSync] ü™ë –°–¢–û–õ #${tableNumber} –ó–ê–ù–Ø–¢ –∑–∞–∫–∞–∑–æ–º #${order.orderId} (${zoneName} –∑–æ–Ω–∞)`)
    }

    // –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω—ã
    const zoneState: IRestaurantZoneState = {
      orderId: order.orderId,
      zoneType,
      tableNumber,
      position: this.p_calculateTablePosition(zoneType, tableNumber),
      assignedWaiter: this.p_assignWaiter(zoneType),
      placementStatus: 'placed',
      placedAt: new Date(),
      lastUpdatedAt: new Date(),
      metadata: {
        hasSpecialRequests: this.p_hasSpecialRequests(order.dishDescription),
        estimatedServiceTime: this.p_calculateEstimatedServiceTime(order),
        actualServiceTime: undefined
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.p_zoneStates.set(order.orderId, zoneState)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    await this.p_processQueue(zoneType)

    return { ...zoneState }
  }

  /**
   * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ VIP —Å—Ç–∞—Ç—É—Å–∞
   */
  async moveOrderBetweenZones(orderId: number, newVipStatus: boolean): Promise<IRestaurantZoneState> {
    const currentState = this.p_zoneStates.get(orderId)
    if (!currentState) {
      throw new Error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–æ–Ω–∞—Ö`)
    }

    const newZoneType = newVipStatus ? 'vip' : 'regular'

    // –ï—Å–ª–∏ –∑–æ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º timestamp
    if (currentState.zoneType === newZoneType) {
      currentState.lastUpdatedAt = new Date()
      return { ...currentState }
    }

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ª
    this.p_occupiedTables.delete(currentState.tableNumber)

    // –ò—â–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª –≤ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω–µ
    const availableTables = await this.getAvailableTables(newZoneType)

    if (availableTables.length === 0) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–ª –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
      this.p_occupiedTables.add(currentState.tableNumber)
      throw new Error(`–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –≤ –∑–æ–Ω–µ ${newZoneType} –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}`)
    }

    // –ó–∞–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª
    const newTableNumber = availableTables[0]
    this.p_occupiedTables.add(newTableNumber)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω—ã
    const updatedState: IRestaurantZoneState = {
      ...currentState,
      zoneType: newZoneType,
      tableNumber: newTableNumber,
      position: this.p_calculateTablePosition(newZoneType, newTableNumber),
      assignedWaiter: this.p_assignWaiter(newZoneType),
      lastUpdatedAt: new Date()
    }

    this.p_zoneStates.set(orderId, updatedState)

    if (this.p_config.enableDetailedLogging) {
      console.log(`[RestaurantZoneSync] –ó–∞–∫–∞–∑ ${orderId} –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ ${currentState.zoneType} –≤ ${newZoneType}, –Ω–æ–≤—ã–π —Å—Ç–æ–ª ${newTableNumber}`)
    }

    return { ...updatedState }
  }

  /**
   * –£–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∑–æ–Ω—ã –ø–æ—Å–ª–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
   */
  async removeOrderFromZone(orderId: number): Promise<boolean> {
    const state = this.p_zoneStates.get(orderId)
    if (!state) {
      return false
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–æ–ª–∞
    if (this.p_config.enableDetailedLogging) {
      const zoneName = state.zoneType === 'vip' ? 'VIP' : '–û–ë–´–ß–ù–û–ô'
      console.log(`[RestaurantZoneSync] üÜì –°–¢–û–õ #${state.tableNumber} –û–°–í–û–ë–û–ñ–î–ï–ù –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ #${orderId} (${zoneName} –∑–æ–Ω–∞)`)
    }

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–æ–ª
    this.p_occupiedTables.delete(state.tableNumber)

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    this.p_zoneStates.delete(orderId)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ç–æ–ª–∞
    await this.p_processQueue(state.zoneType)

    return true
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ç–æ–ª–∞
   */
  private async p_processQueue(zoneType: 'vip' | 'regular' | 'takeaway'): Promise<void> {
    if (zoneType === 'takeaway') return // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

    const queue = zoneType === 'vip' ? this.p_vipQueue : this.p_regularQueue
    if (queue.length === 0) return

    const availableTables = await this.getAvailableTables(zoneType)
    if (availableTables.length === 0) return

    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    const nextOrder = queue.shift()
    if (!nextOrder) return

    // –†–∞–∑–º–µ—â–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–≤–æ–±–æ–¥–∏–≤—à–µ–º—Å—è —Å—Ç–æ–ª–µ
    const tableNumber = availableTables[0]
    this.p_occupiedTables.add(tableNumber)

    const zoneName = zoneType === 'vip' ? 'VIP' : '–û–ë–´–ß–ù–û–ô'
    if (this.p_config.enableDetailedLogging) {
      console.log(`[RestaurantZoneSync] üîÑ –ó–ê–ö–ê–ó #${nextOrder.orderId} –ü–ï–†–ï–ú–ï–©–ï–ù –ò–ó –û–ß–ï–†–ï–î–ò –ù–ê –°–¢–û–õ #${tableNumber} (${zoneName} –∑–æ–Ω–∞)`)
    }

    const zoneState: IRestaurantZoneState = {
      orderId: nextOrder.orderId,
      zoneType,
      tableNumber,
      position: this.p_calculateTablePosition(zoneType, tableNumber),
      assignedWaiter: this.p_assignWaiter(zoneType),
      placementStatus: 'placed',
      placedAt: new Date(),
      lastUpdatedAt: new Date(),
      metadata: {
        hasSpecialRequests: this.p_hasSpecialRequests(nextOrder.dishDescription),
        estimatedServiceTime: this.p_calculateEstimatedServiceTime(nextOrder),
        actualServiceTime: undefined
      }
    }

    this.p_zoneStates.set(nextOrder.orderId, zoneState)
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–æ–Ω—ã
   */
  async updateZoneState(orderId: number, updates: Partial<IRestaurantZoneState>): Promise<IRestaurantZoneState> {
    const currentState = this.p_zoneStates.get(orderId)
    if (!currentState) {
      throw new Error(`–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–æ–Ω–∞—Ö`)
    }

    const updatedState: IRestaurantZoneState = {
      ...currentState,
      ...updates,
      lastUpdatedAt: new Date()
    }

    this.p_zoneStates.set(orderId, updatedState)
    return { ...updatedState }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async getZoneState(orderId: number): Promise<IRestaurantZoneState | null> {
    const state = this.p_zoneStates.get(orderId)
    return state ? { ...state } : null
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –∑–æ–Ω–∞–º–∏
   */
  async syncAllZones(): Promise<IRestaurantZoneState[]> {
    return Array.from(this.p_zoneStates.values()).map(state => ({ ...state }))
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∑–æ–Ω
   */
  async getAllZoneStates(): Promise<IRestaurantZoneState[]> {
    return Array.from(this.p_zoneStates.values()).map(state => ({ ...state }))
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª—ã –≤ –∑–æ–Ω–µ
   */
  async getAvailableTables(zoneType: 'vip' | 'regular'): Promise<number[]> {
    const allTables = zoneType === 'vip'
      ? this.p_config.zoneSettings.vip.tableNumbers
      : this.p_config.zoneSettings.regular.tableNumbers

    return allTables.filter(table => !this.p_occupiedTables.has(table))
  }

  // ==========================================
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
  // ==========================================

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
   */
  private async p_handleOrderAdded(event: IOrderAddedEvent): Promise<void> {
    try {
      await this.placeOrderInZone(event.order)
    } catch (error) {
      console.error(`[RestaurantZoneSync] –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${event.orderId}:`, error)
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
   */
  private async p_handleOrderRemoved(event: IOrderRemovedEvent): Promise<void> {
    await this.removeOrderFromZone(event.orderId)
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
   */
  private async p_handleOrderModified(event: IOrderModifiedEvent): Promise<void> {
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è VIP —Å—Ç–∞—Ç—É—Å, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏
    if (event.field === 'isVipCustomer') {
      try {
        await this.moveOrderBetweenZones(event.orderId, event.newValue as boolean)
      } catch (error) {
        console.error(`[RestaurantZoneSync] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${event.orderId}:`, error)
      }
    }
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º timestamp
    else {
      const currentState = this.p_zoneStates.get(event.orderId)
      if (currentState) {
        currentState.lastUpdatedAt = new Date()
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  private async p_handleStatusChanged(event: RestaurantChangeEvent): Promise<void> {
    const state = this.p_zoneStates.get(event.orderId)
    if (!state) return

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    const statusEvent = event as any
    const oldStatus = state.placementStatus

    switch (statusEvent.newStatus) {
      case 'preparing':
        state.placementStatus = 'occupied'
        break
      case 'ready':
        state.placementStatus = 'ready_for_service'
        break
      case 'served':
        state.placementStatus = 'cleared'
        break
    }

    state.lastUpdatedAt = new Date()

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if (this.p_config.enableDetailedLogging && oldStatus !== state.placementStatus) {
      const zoneName = state.zoneType === 'vip' ? 'VIP' : '–û–ë–´–ß–ù–û–ô'
      console.log(`[RestaurantZoneSync] üìä –°–¢–û–õ #${state.tableNumber} (${zoneName}): –∑–∞–∫–∞–∑ #${event.orderId} ‚Üí ${statusEvent.newStatus.toUpperCase()}`)
    }
  }

  // ==========================================
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  // ==========================================

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—Ç–æ–ª–∞ –≤ –∑–æ–Ω–µ
   */
  private p_calculateTablePosition(zoneType: 'vip' | 'regular' | 'takeaway', tableNumber: number): { x: number; y: number; section: string } {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ª–æ–≤
    const baseX = zoneType === 'vip' ? 20 : 60
    const baseY = 20
    const spacing = 40

    const row = Math.floor((tableNumber - 1) / 5)
    const col = (tableNumber - 1) % 5

    return {
      x: baseX + col * spacing,
      y: baseY + row * spacing,
      section: zoneType
    }
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –¥–ª—è –∑–æ–Ω—ã
   */
  private p_assignWaiter(zoneType: 'vip' | 'regular' | 'takeaway'): string {
    const vipWaiters = ['–ê–Ω–Ω–∞ (VIP)', '–î–º–∏—Ç—Ä–∏–π (VIP)', '–ï–ª–µ–Ω–∞ (VIP)']
    const regularWaiters = ['–ò–≥–æ—Ä—å', '–ú–∞—Ä–∏—è', '–°–µ—Ä–≥–µ–π', '–û–ª—å–≥–∞', '–ê–Ω–¥—Ä–µ–π']

    if (zoneType === 'vip') {
      return vipWaiters[Math.floor(Math.random() * vipWaiters.length)]
    } else {
      return regularWaiters[Math.floor(Math.random() * regularWaiters.length)]
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—Å–æ–±—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–ª—é–¥–∞
   */
  private p_hasSpecialRequests(dishDescription: string): boolean {
    const specialKeywords = ['–±–µ–∑', '—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º', '–æ—Å–æ–±—ã–π', '–∞–ª–ª–µ—Ä–≥–∏—è', '–≤–µ–≥–∞–Ω', '–æ—Å—Ç—Ä—ã–π']
    return specialKeywords.some(keyword =>
      dishDescription.toLowerCase().includes(keyword.toLowerCase())
    )
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
   */
  private p_calculateEstimatedServiceTime(order: IRestaurantOrder): number {
    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    let baseTime = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    // VIP –∫–ª–∏–µ–Ω—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ
    if (order.isVipCustomer) {
      baseTime *= 0.75 // 25% –±—ã—Å—Ç—Ä–µ–µ
    }

    // –°–ª–æ–∂–Ω—ã–µ –±–ª—é–¥–∞ —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
    if (this.p_hasSpecialRequests(order.dishDescription)) {
      baseTime *= 1.3 // 30% –¥–æ–ª—å—à–µ
    }

    return Math.round(baseTime)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–æ–Ω–∞–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  async getZoneStatistics(): Promise<{
    vip: { occupied: number; available: number; tables: number[]; queueLength: number }
    regular: { occupied: number; available: number; tables: number[]; queueLength: number }
    takeaway: { pending: number; ready: number }
  }> {
    const vipTables = await this.getAvailableTables('vip')
    const regularTables = await this.getAvailableTables('regular')

    const vipStates = Array.from(this.p_zoneStates.values()).filter(s => s.zoneType === 'vip')
    const regularStates = Array.from(this.p_zoneStates.values()).filter(s => s.zoneType === 'regular')

    return {
      vip: {
        occupied: this.p_config.zoneSettings.vip.maxTables - vipTables.length,
        available: vipTables.length,
        tables: vipTables,
        queueLength: this.p_vipQueue.length
      },
      regular: {
        occupied: this.p_config.zoneSettings.regular.maxTables - regularTables.length,
        available: regularTables.length,
        tables: regularTables,
        queueLength: this.p_regularQueue.length
      },
      takeaway: {
        pending: 0, // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É takeaway
        ready: 0
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  clearAll(): void {
    this.p_zoneStates.clear()
    this.p_occupiedTables.clear()
    this.p_vipQueue.length = 0
    this.p_regularQueue.length = 0
  }
} 