import { pipe } from 'ramda'
import type {
    IEventQueue,
    IWorkItem,
    IWorkerFreeEvent,
    IWorkAssignment,
    IWorkResult,
    ZipProcessorFunction,
    FilterProcessorFunction,
    WorkerProcessorFunction,
    WorkGeneratorFunction
} from '../interfaces'

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏–π (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∏–∑ UI)
let globalEventLogger: ((type: string, icon: string, message: string, data?: string) => void) | null = null

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏–π
 * @param {function} logger - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 * @returns {void}
 */
export function setGlobalEventLogger(logger: (type: string, icon: string, message: string, data?: string) => void) {
    globalEventLogger = logger
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
 * @param {string} type - —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
 * @param {string} icon - –∏–∫–æ–Ω–∫–∞ —Å–æ–±—ã—Ç–∏—è
 * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {string} [data] - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {void}
 */
function logEvent(type: string, icon: string, message: string, data?: string) {
    if (globalEventLogger) {
        globalEventLogger(type, icon, message, data)
    }
}

/**
 * ZIP-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–æ—Ç–æ–∫–∏ —Ä–∞–±–æ—Ç –∏ —Ä–∞–±–æ—á–∏—Ö
 * @description –û–∂–∏–¥–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç—É –∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ, —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
 * @param {IEventQueue<IWorkItem>} _workQueue - –æ—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç
 * @param {IEventQueue<IWorkerFreeEvent>} _freeWorkersQueue - –æ—á–µ—Ä–µ–¥—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö  
 * @param {IEventQueue<IWorkAssignment>} _assignmentQueue - –æ—á–µ—Ä–µ–¥—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
 * @returns {Promise<void>} –ø—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const createZipProcessorAsync: ZipProcessorFunction = async (
    _workQueue: IEventQueue<IWorkItem>,
    _freeWorkersQueue: IEventQueue<IWorkerFreeEvent>,
    _assignmentQueue: IEventQueue<IWorkAssignment>
): Promise<void> => {
    // –ñ–¥–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç—É –ò —Ä–∞–±–æ—á–µ–≥–æ
    const workItem = await _workQueue.dequeueAsync()
    const workerId = await _freeWorkersQueue.dequeueAsync()

    logEvent('assignment', 'ü§ù', `–ó–∞–∫–∞–∑ #${workItem} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–≤–∞—Ä—É #${workerId}`, `–ó–∞–∫–∞–∑: ${workItem}`)

    // ü§ù –í–†–ï–ú–Ø –î–ò–°–ü–ï–¢–ß–ï–†–ê –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è (100-300–º—Å)
    const decisionTimeMs = Math.random() * 200 + 100 // 100-300–º—Å
    await new Promise(resolve => setTimeout(resolve, decisionTimeMs))

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç
    const assignment: IWorkAssignment = {
        workItem,
        workerId
    } as const

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤—ã—Ö–æ–¥–Ω—É—é –æ—á–µ—Ä–µ–¥—å
    await _assignmentQueue.enqueueAsync(assignment)
}

/**
 * –§–∏–ª—å—Ç—Ä-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—á–∏–º
 * @description –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥–∏ —Ä–∞–±–æ—á–∏—Ö –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É —á–µ—Ç–Ω—ã–µ/–Ω–µ—á–µ—Ç–Ω—ã–µ
 * @param {IEventQueue<IWorkAssignment>} _assignmentQueue - –æ—á–µ—Ä–µ–¥—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
 * @param {IEventQueue<IWorkItem>} _worker1Queue - –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ 1 (—á–µ—Ç–Ω—ã–µ)
 * @param {IEventQueue<IWorkItem>} _worker2Queue - –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ 2 (–Ω–µ—á–µ—Ç–Ω—ã–µ)
 * @returns {Promise<void>} –ø—Ä–æ–º–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const createFilterProcessorAsync: FilterProcessorFunction = async (
    _assignmentQueue: IEventQueue<IWorkAssignment>,
    _worker1Queue: IEventQueue<IWorkItem>,
    _worker2Queue: IEventQueue<IWorkItem>
): Promise<void> => {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    const assignment = await _assignmentQueue.dequeueAsync()

    // üìã –í–†–ï–ú–Ø –§–ò–õ–¨–¢–†–ê –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (50-150–º—Å)
    const analysisTimeMs = Math.random() * 100 + 50 // 50-150–º—Å
    await new Promise(resolve => setTimeout(resolve, analysisTimeMs))

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ù–û–ú–ï–†–£ –†–ê–ë–û–¢–´ (workItem), –∞ –Ω–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ä–∞–±–æ—á–µ–≥–æ!
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ ‚Üí —Ä–∞–±–æ—á–∏–π 1, –Ω–µ—á–µ—Ç–Ω—ã–µ ‚Üí —Ä–∞–±–æ—á–∏–π 2
    const routeToWorker = pipe(
        (workItem: number) => {
            // –î–ª—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª (–≤–∫–ª—é—á–∞—è 0): 0, 2, 4, 6... ‚Üí worker1
            // –î–ª—è –Ω–µ—á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª: 1, 3, 5, 7... ‚Üí worker2
            const isEven = workItem % 2 === 0
            return isEven ? 'worker1' : 'worker2'
        }
    )

    const targetWorker = routeToWorker(assignment.workItem) // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º workItem!

    logEvent('assignment', 'üìã', `–ó–∞–∫–∞–∑ #${assignment.workItem} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∫ –ø–æ–≤–∞—Ä—É #${targetWorker === 'worker1' ? '1' : '2'}`, `–ó–∞–∫–∞–∑: ${assignment.workItem}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É
    if (targetWorker === 'worker1') {
        await _worker1Queue.enqueueAsync(assignment.workItem)
    } else {
        await _worker2Queue.enqueueAsync(assignment.workItem)
    }
}

/**
 * –†–∞–±–æ—á–∏–π-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * –ê–≤—Ç–æ—Ä: "–†–∞–±–æ—á–∏–π –±–µ—Ä–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–º–µ–Ω—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ"
 * 
 * @param _workQueue - –æ—á–µ—Ä–µ–¥—å —Ä–∞–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ
 * @param _freeWorkersQueue - –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏
 * @param _resultQueue - –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * @param _workerId - ID —Ä–∞–±–æ—á–µ–≥–æ
 */
export const createWorkerProcessorAsync: WorkerProcessorFunction = async (
    _workQueue: IEventQueue<IWorkItem>,
    _freeWorkersQueue: IEventQueue<IWorkerFreeEvent>,
    _resultQueue: IEventQueue<IWorkResult>,
    _workerId: number
): Promise<void> => {
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—É
    const workItem = await _workQueue.dequeueAsync()

    logEvent('cooking', 'üç≥', `–ü–æ–≤–∞—Ä #${_workerId} –Ω–∞—á–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ #${workItem}`, `–ó–∞–∫–∞–∑: ${workItem}`)

    // üç≥ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ï –í–†–ï–ú–Ø –ü–†–ò–ì–û–¢–û–í–õ–ï–ù–ò–Ø (1-3 —Å–µ–∫—É–Ω–¥—ã)
    const cookingTimeMs = Math.random() * 2000 + 1000 // 1000-3000–º—Å
    await new Promise(resolve => setTimeout(resolve, cookingTimeMs))

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç—ã (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä - —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 2)
    const processWork = pipe(
        (work: number) => work * 2
    )

    const processedResult = processWork(workItem)

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç
    const result: IWorkResult = {
        workItem,
        result: processedResult,
        completedAt: Date.now()
    } as const

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await _resultQueue.enqueueAsync(result)

    logEvent('complete', '‚úÖ', `–ó–∞–∫–∞–∑ #${workItem} –≥–æ—Ç–æ–≤! –ü–æ–≤–∞—Ä #${_workerId} –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è`, `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${processedResult}`)

    // –°–æ–æ–±—â–∞–µ–º —á—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏–ª–∏—Å—å
    await _freeWorkersQueue.enqueueAsync(_workerId)
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã - —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —Ç–∞–π–º–µ—Ä—É
 * –ê–≤—Ç–æ—Ä: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã –ø–æ —Ç–∞–π–º–µ—Ä—É –æ—Ç 1 –¥–æ 5 —Å–µ–∫—É–Ω–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞"
 * 
 * @param _workQueue - –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —Ä–∞–±–æ—Ç
 * @param _intervalMs - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param _maxWorks - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
 */
export const createWorkGeneratorAsync: WorkGeneratorFunction = (
    _workQueue: IEventQueue<IWorkItem>,
    _intervalMs: number = 2000,
    _maxWorks: number = 50
) => {
    let p_workCounter = 1
    let p_intervalId: NodeJS.Timeout | null = null

    return {
        /**
         * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç
         */
        async startAsync(): Promise<void> {
            p_intervalId = setInterval(async () => {
                if (p_workCounter <= _maxWorks) {
                    await _workQueue.enqueueAsync(p_workCounter)
                    logEvent('order', 'üìù', `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${p_workCounter} –ø—Ä–∏–Ω—è—Ç`, `–ó–∞–∫–∞–∑: ${p_workCounter}`)
                    p_workCounter++
                } else {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
                    logEvent('system', '‚èπÔ∏è', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', `–í—Å–µ–≥–æ: ${_maxWorks}`)
                    await this.stopAsync()
                }
            }, _intervalMs)
        },

        /**
         * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç
         */
        async stopAsync(): Promise<void> {
            if (p_intervalId) {
                clearInterval(p_intervalId)
                p_intervalId = null
            }
        },

        /**
         * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç
         */
        getCurrentWorkCount(): number {
            return p_workCounter - 1
        }
    }
} 