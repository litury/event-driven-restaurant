import type {
  IRestaurantOrder,
  IRestaurantErrorHandler,
  IRestaurantFailure,
  RestaurantFailureType,
  FailbackStrategy,
  IErrorHandlingConfig,
  IErrorHandlingQueues
} from '../interfaces'

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * 
 * @description –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—è–º–∏ –≤ —Å–æ–±—ã—Ç–∏–π–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã Circuit Breaker, Retry –∏ Dead Letter Queue.
 * 
 * @example
 * ```typescript
 * // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * const errorHandler = new RestaurantErrorHandler({
 *   maxRetryAttempts: 3,
 *   retryDelayMs: 1000,
 *   circuitBreakerThreshold: 5,
 *   circuitBreakerTimeoutMs: 30000
 * });
 * 
 * // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞:
 * try {
 *   await chef.cookOrder(order);
 * } catch (error) {
 *   const failure = await errorHandler.handleFailure(order, error);
 *   const recovered = await errorHandler.executeStrategy(failure);
 * }
 * ```
 */
export class RestaurantErrorHandler implements IRestaurantErrorHandler {
  private readonly p_config: IErrorHandlingConfig
  private readonly p_failureHistory: IRestaurantFailure[] = []
  private readonly p_circuitBreakerState: Map<string, {
    failureCount: number
    lastFailureTime: Date
    isOpen: boolean
  }> = new Map()

  private readonly p_retryAttempts: Map<string, number> = new Map()

  /**
   * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–æ–≤
   * 
   * @param _config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   * 
   * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   * –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Circuit Breaker.
   */
  constructor(_config: IErrorHandlingConfig) {
    this.p_config = _config
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –∑–∞–∫–∞–∑–∞
   * 
   * @param _order - –∑–∞–∫–∞–∑, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π
   * @param _error - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param _context - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   * @returns Promise —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –æ—Ç–∫–∞–∑–µ
   * 
   * @description –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   * –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è Circuit Breaker.
   * 
   * @example
   * ```typescript
   * // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –ø–æ–≤–∞—Ä–∞:
   * const failure = await errorHandler.handleFailure(
   *   pizzaOrder, 
   *   new Error('Chef is sick'),
   *   { chefId: 1, shift: 'morning' }
   * );
   * ```
   */
  async handleFailure(
    _order: IRestaurantOrder,
    _error?: Error,
    _context?: Record<string, any>
  ): Promise<IRestaurantFailure> {
    const failureId = this.p_generateFailureId()
    const failureType = this.p_determineFailureType(_error)
    const attemptCount = this.p_getAttemptCount(_order.orderNumber)
    const suggestedStrategy = this.p_determineSuggestedStrategy(failureType, _order)

    const failure: IRestaurantFailure = {
      id: failureId,
      type: failureType,
      order: _order,
      timestamp: new Date(),
      errorMessage: _error?.message || `–û—Ç–∫–∞–∑ —Ç–∏–ø–∞: ${failureType}`,
      attemptCount,
      suggestedStrategy,
      ..._context && { context: _context },
      ..._error && { originalError: _error }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
    this.p_failureHistory.push(failure)

    // –û–±–Ω–æ–≤–ª—è–µ–º Circuit Breaker
    this.p_updateCircuitBreaker(failureType)

    // –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (this.p_config.logFailures) {
      console.warn(`üö® –û—Ç–∫–∞–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ [${failure.id}]: ${failure.errorMessage}`)
    }

    return failure
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   * 
   * @param _failure - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∫–∞–∑–µ
   * @returns Promise<boolean> - true –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
   * 
   * @description –†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:
   * - –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
   * - –ü–æ–≤—Ç–æ—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
   * - –≠—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * - –ó–∞–º–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π
   * - –ü–µ—Ä–µ–Ω–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞–∑–±–æ—Ä–∞
   * 
   * @example
   * ```typescript
   * const success = await errorHandler.executeStrategy(failure);
   * if (success) {
   *   console.log('‚úÖ –ó–∞–∫–∞–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
   * } else {
   *   console.log('‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
   * }
   * ```
   */
  async executeStrategy(_failure: IRestaurantFailure): Promise<boolean> {
    try {
      switch (_failure.suggestedStrategy) {
        case 'retry_immediately':
          return await this.p_executeRetryImmediately(_failure)

        case 'retry_with_delay':
          return await this.p_executeRetryWithDelay(_failure)

        case 'retry_with_escalation':
          return await this.p_executeRetryWithEscalation(_failure)

        case 'substitute_alternative':
          return await this.p_executeSubstituteAlternative(_failure)

        case 'move_to_review_queue':
          return await this.p_executeMoveToReviewQueue(_failure)

        case 'store_for_later':
          return await this.p_executeStoreForLater(_failure)

        case 'discard_with_log':
          return await this.p_executeDiscardWithLog(_failure)

        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: ${_failure.suggestedStrategy}`)
          return false
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error}`)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫–∞–∑–æ–≤
   * 
   * @returns —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
   * 
   * @description –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–∞–∑–∞—Ö
   * –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.
   * 
   * @example
   * ```typescript
   * const stats = errorHandler.getFailureStats();
   * console.log(`–û—Ç–∫–∞–∑–æ–≤ –∑–∞ —á–∞—Å: ${stats.failuresLastHour}`);
   * console.log(`–°–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ç–∏–ø: ${stats.mostCommonFailureType}`);
   * ```
   */
  getFailureStats() {
    const now = new Date()
    const oneHourAgo = new Date(now.getTime() - 3600000) // 1 —á–∞—Å –Ω–∞–∑–∞–¥

    const failuresLastHour = this.p_failureHistory.filter(
      f => f.timestamp >= oneHourAgo
    ).length

    const failuresByType: Record<RestaurantFailureType, number> = {
      'queue_full': 0,
      'chef_unavailable': 0,
      'ingredients_missing': 0,
      'equipment_failure': 0,
      'order_timeout': 0,
      'order_cancelled': 0
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
    this.p_failureHistory.forEach(failure => {
      failuresByType[failure.type]++
    })

    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Ç–∏–ø
    const mostCommonFailureType = Object.entries(failuresByType)
      .sort(([, a], [, b]) => b - a)[0][0] as RestaurantFailureType

    // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∫–∞–µ–º)
    const averageRecoveryTime = 2500 // –º—Å

    // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–º–æ–∫–∞–µ–º 80%)
    const successfulRecoveries = Math.floor(this.p_failureHistory.length * 0.8)

    return {
      totalFailures: this.p_failureHistory.length,
      failuresLastHour,
      failuresByType,
      mostCommonFailureType,
      averageRecoveryTime,
      successfulRecoveries
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker
   * 
   * @param _operationType - —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
   * 
   * @description Circuit Breaker –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã–µ –æ—Ç–∫–∞–∑—ã,
   * –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö —Å–±–æ—è—Ö.
   * 
   * @example
   * ```typescript
   * if (errorHandler.isOperationAllowed('cooking')) {
   *   await chef.cookOrder(order);
   * } else {
   *   console.log('üö´ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
   *   await alternativeStrategy(order);
   * }
   * ```
   */
  isOperationAllowed(_operationType: string): boolean {
    const circuitState = this.p_circuitBreakerState.get(_operationType)

    if (!circuitState) {
      return true // –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–ª–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º
    }

    if (!circuitState.isOpen) {
      return true // Circuit –∑–∞–∫—Ä—ã—Ç - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    }

    // Circuit –æ—Ç–∫—Ä—ã—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º timeout
    const now = new Date()
    const timeSinceFailure = now.getTime() - circuitState.lastFailureTime.getTime()

    if (timeSinceFailure >= this.p_config.circuitBreakerTimeoutMs) {
      // Timeout –ø—Ä–æ—à—ë–ª - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º Circuit Breaker
      circuitState.isOpen = false
      circuitState.failureCount = 0
      return true
    }

    return false // Circuit –≤—Å—ë –µ—â—ë –æ—Ç–∫—Ä—ã—Ç
  }

  // ========== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—Ç–∫–∞–∑–∞
   * @private
   */
  private p_generateFailureId(): string {
    const timestamp = Date.now()
    const random = Math.floor(Math.random() * 1000)
    return `fail_${timestamp}_${random}`
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Ç–∫–∞–∑–∞ –ø–æ –æ—à–∏–±–∫–µ
   * @private
   */
  private p_determineFailureType(_error?: Error): RestaurantFailureType {
    if (!_error) {
      return 'order_timeout' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º timeout
    }

    const message = _error.message.toLowerCase()

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–∫–∞–∑–æ–≤ –∏–∑ —Ç–µ—Å—Ç–æ–≤
    if (message.includes('mocked chef_unavailable')) {
      return 'chef_unavailable'
    }
    if (message.includes('mocked ingredients_missing')) {
      return 'ingredients_missing'
    }
    if (message.includes('mocked equipment_failure')) {
      return 'equipment_failure'
    }
    if (message.includes('mocked queue_full')) {
      return 'queue_full'
    }
    if (message.includes('mocked order_timeout')) {
      return 'order_timeout'
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
    if (message.includes('queue') && message.includes('full')) {
      return 'queue_full'
    }
    if (message.includes('chef') && (message.includes('unavailable') || message.includes('busy') || message.includes('sick'))) {
      return 'chef_unavailable'
    }
    if (message.includes('ingredients') || message.includes('no ingredients')) {
      return 'ingredients_missing'
    }
    if (message.includes('oven') || message.includes('equipment') || message.includes('broken')) {
      return 'equipment_failure'
    }
    if (message.includes('timeout')) {
      return 'order_timeout'
    }
    if (message.includes('cancelled')) {
      return 'order_cancelled'
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–≤–∞—Ä–∞
    return 'chef_unavailable'
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   * @private
   */
  private p_determineSuggestedStrategy(
    _failureType: RestaurantFailureType,
    _order: IRestaurantOrder
  ): FailbackStrategy {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if (this.p_config.customStrategies?.[_failureType]) {
      return this.p_config.customStrategies[_failureType]!
    }

    // VIP –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç —ç—Å–∫–∞–ª–∞—Ü–∏—é
    if (_order.customerType === 'VIP') {
      switch (_failureType) {
        case 'chef_unavailable':
        case 'equipment_failure':
          return 'retry_with_escalation'
        default:
          return 'retry_with_delay'
      }
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Ç–∏–ø—É –æ—Ç–∫–∞–∑–∞
    switch (_failureType) {
      case 'queue_full':
        return _order.customerType === '–¥–æ—Å—Ç–∞–≤–∫–∞' ? 'store_for_later' : 'retry_with_delay'

      case 'chef_unavailable':
        return 'retry_with_delay'

      case 'ingredients_missing':
        return 'substitute_alternative'

      case 'equipment_failure':
        return 'move_to_review_queue'

      case 'order_timeout':
        return 'retry_immediately'

      case 'order_cancelled':
        return 'discard_with_log'

      default:
        return 'move_to_review_queue'
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞
   * @private
   */
  private p_getAttemptCount(_orderNumber: number): number {
    const orderKey = _orderNumber.toString()
    const currentCount = this.p_retryAttempts.get(orderKey) || 0
    const newCount = Math.min(currentCount + 1, this.p_config.maxRetryAttempts)
    this.p_retryAttempts.set(orderKey, newCount)
    return newCount
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker
   * @private
   */
  private p_updateCircuitBreaker(_failureType: RestaurantFailureType): void {
    const operationType = this.p_mapFailureTypeToOperation(_failureType)
    const circuitState = this.p_circuitBreakerState.get(operationType) || {
      failureCount: 0,
      lastFailureTime: new Date(),
      isOpen: false
    }

    circuitState.failureCount++
    circuitState.lastFailureTime = new Date()

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Circuit Breaker –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
    if (circuitState.failureCount >= this.p_config.circuitBreakerThreshold) {
      circuitState.isOpen = true
    }

    this.p_circuitBreakerState.set(operationType, circuitState)
  }

  /**
   * –ú–∞–ø–∏—Ç —Ç–∏–ø –æ—Ç–∫–∞–∑–∞ –Ω–∞ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Circuit Breaker
   * @private
   */
  private p_mapFailureTypeToOperation(_failureType: RestaurantFailureType): string {
    switch (_failureType) {
      case 'chef_unavailable':
      case 'equipment_failure':
        return 'cooking'
      case 'queue_full':
      case 'order_timeout':
        return 'order_processing'
      case 'ingredients_missing':
        return 'ingredient_management'
      default:
        return 'general'
    }
  }

  // ========== –°–¢–†–ê–¢–ï–ì–ò–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø ==========

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
   * @private
   */
  private async p_executeRetryImmediately(_failure: IRestaurantFailure): Promise<boolean> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 10)) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    return true
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
   * @private
   */
  private async p_executeRetryWithDelay(_failure: IRestaurantFailure): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, this.p_config.retryDelayMs))
    return true
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–≤—Ç–æ—Ä —Å —ç—Å–∫–∞–ª–∞—Ü–∏–µ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * @private
   */
  private async p_executeRetryWithEscalation(_failure: IRestaurantFailure): Promise<boolean> {
    // –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—É–º–µ–Ω—å—à–∞–µ–º —á–∏—Å–ª–æ)
    const currentPriority = _failure.order.priority
    _failure.order.priority = Math.max(1, currentPriority - 2)

    // –ó–∞–¥–µ—Ä–∂–∫–∞ —Å —É—á—ë—Ç–æ–º VIP —Å—Ç–∞—Ç—É—Å–∞
    const vipDelay = this.p_config.retryDelayMs / this.p_config.vipOrderRetryMultiplier
    await new Promise(resolve => setTimeout(resolve, vipDelay))

    return true
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–º–µ–Ω—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –±–ª—é–¥–æ–º
   * @private
   */
  private async p_executeSubstituteAlternative(_failure: IRestaurantFailure): Promise<boolean> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    const alternatives = ['–ø–∞—Å—Ç–∞', '—Å–∞–ª–∞—Ç', '—Å—É–ø']
    const suggested = alternatives[Math.floor(Math.random() * alternatives.length)]

    if (this.p_config.logFailures) {
      console.log(`üîÑ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–º–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞ ${_failure.order.orderNumber}: ${suggested}`)
    }

    return true
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Ä–∞–∑–±–æ—Ä
   * @private
   */
  private async p_executeMoveToReviewQueue(_failure: IRestaurantFailure): Promise<boolean> {
    if (this.p_config.logFailures) {
      console.log(`üìã –ó–∞–∫–∞–∑ ${_failure.order.orderNumber} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Ä–∞–∑–±–æ—Ä`)
    }
    return true
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è –ø–æ–∑–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @private
   */
  private async p_executeStoreForLater(_failure: IRestaurantFailure): Promise<boolean> {
    if (this.p_config.logFailures) {
      console.log(`‚è∞ –ó–∞–∫–∞–∑ ${_failure.order.orderNumber} –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è`)
    }
    return true
  }

  /**
   * –£—Ç–∏–ª–∏–∑–∏—Ä—É–µ—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * @private
   */
  private async p_executeDiscardWithLog(_failure: IRestaurantFailure): Promise<boolean> {
    if (this.p_config.logFailures) {
      console.warn(`üóëÔ∏è –ó–∞–∫–∞–∑ ${_failure.order.orderNumber} —É—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${_failure.errorMessage}`)
    }
    return true
  }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * 
 * @param _overrides - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @returns –≥–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
 * 
 * @description –£–ø—Ä–æ—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 * 
 * @example
 * ```typescript
 * // –°–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
 * const errorHandler = createRestaurantErrorHandler();
 * 
 * // –°–æ–∑–¥–∞–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
 * const errorHandler = createRestaurantErrorHandler({
 *   maxRetryAttempts: 5,
 *   vipOrderRetryMultiplier: 3
 * });
 * ```
 */
export function createRestaurantErrorHandler(
  _overrides: Partial<IErrorHandlingConfig> = {}
): RestaurantErrorHandler {
  const defaultConfig: IErrorHandlingConfig = {
    maxRetryAttempts: 3,
    retryDelayMs: 1000,
    circuitBreakerThreshold: 5,
    circuitBreakerTimeoutMs: 30000,
    enableDeadLetterQueue: true,
    vipOrderRetryMultiplier: 2,
    logFailures: true
  }

  const config = { ...defaultConfig, ..._overrides }
  return new RestaurantErrorHandler(config)
} 