import { ref, reactive, onMounted, onUnmounted } from 'vue';
import { RestaurantZoneAPI } from '../../WorkloadBalancing/services/restaurantZoneAPI';
import { KitchenChangeLog } from '../../WorkloadBalancing/services/kitchenChangeLog';
import { RestaurantZoneSync } from '../../WorkloadBalancing/services/restaurantZoneSync';
import type {
  IRestaurantOrder,
  RestaurantChangeEvent
} from '../../WorkloadBalancing/interfaces/IRestaurantSyncModel';

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–æ–Ω—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (UI)
interface IRestaurantTable {
  number: number;
  isOccupied: boolean;
  orderIds: string[];
  orders?: IRestaurantOrder[];
}

interface IRestaurantZone {
  name: string;
  tables: IRestaurantTable[];
  capacity: number;
  availableSlots: number;
}

/**
 * Composable –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –î–ó-3 —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
export function useRestaurantSync() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  const isActive = ref(false);
  const p_updateInterval = ref<number | null>(null);

  // –ò–Ω—Å—Ç–∞–Ω—Å—ã —Å–∏—Å—Ç–µ–º—ã
  const p_restaurantAPI = new RestaurantZoneAPI();
  const p_kitchenLog = new KitchenChangeLog();

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∑–æ–Ω
  const syncConfig = {
    maxEventsInMemory: 1000,
    syncIntervalMs: 500,
    enableDetailedLogging: true,
    zoneSettings: {
      vip: {
        maxTables: 5,
        tableNumbers: [1, 2, 3, 4, 5],
        specialFeatures: ['–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–û—Å–æ–±–æ–µ –º–µ–Ω—é']
      },
      regular: {
        maxTables: 10,
        tableNumbers: [6, 7, 8, 9, 10, 11, 12, 13, 14, 15] // 10 —Å—Ç–æ–ª–æ–≤: 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
      },
      takeaway: {
        maxOrders: 20,
        averageWaitTime: 15 // –º–∏–Ω—É—Ç
      }
    },
    autoCleanup: {
      enabled: true,
      keepLastN: 500,
      intervalMs: 300000 // 5 –º–∏–Ω—É—Ç
    }
  };

  const p_zoneSync = new RestaurantZoneSync(syncConfig);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—É—é —Ü–µ–ø–æ—á–∫—É
  p_restaurantAPI.onOrderChange((event: RestaurantChangeEvent) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∂—É—Ä–Ω–∞–ª –∫—É—Ö–Ω–∏
    p_kitchenLog.append(event).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª –∫—É—Ö–Ω–∏:', error);
    });
  });

  p_kitchenLog.onNewEvent((event: RestaurantChangeEvent) => {
    // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
    p_zoneSync.processOrderEvent(event);
  });

  // –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const zones = reactive<{
    vipZone: IRestaurantZone;
    regularZone: IRestaurantZone;
  }>({
    vipZone: {
      name: 'VIP –∑–æ–Ω–∞',
      tables: [],
      capacity: 5,
      availableSlots: 5
    },
    regularZone: {
      name: '–û–±—ã—á–Ω–∞—è –∑–æ–Ω–∞',
      tables: [],
      capacity: 10,
      availableSlots: 10
    }
  });

  const recentEvents = ref<RestaurantChangeEvent[]>([]);
  const activeOrders = ref<IRestaurantOrder[]>([]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const statistics = reactive({
    totalOrders: 0,
    vipOrders: 0,
    completedOrders: 0,
    eventsLogged: 0,
    zonesOccupancy: 0,
    vipQueueLength: 0,
    regularQueueLength: 0
  });

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async function updateState() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
      const allOrders = await p_restaurantAPI.getAllOrders();
      activeOrders.value = allOrders.filter(order => order.status !== 'served');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
      recentEvents.value = await p_kitchenLog.getRecentEvents(10);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
      const zoneStats = await p_zoneSync.getZoneStatistics();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–±–µ–∑ .value - —ç—Ç–æ reactive –æ–±—ä–µ–∫—Ç)
      Object.assign(statistics, {
        totalOrders: allOrders.length,
        vipOrders: allOrders.filter(order => order.isVipCustomer).length,
        completedOrders: allOrders.filter(order => order.status === 'served').length,
        totalEvents: recentEvents.value.length,
        eventsLogged: await p_kitchenLog.getEventCount(),

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
        vipQueueLength: zoneStats.vip.queueLength,
        regularQueueLength: zoneStats.regular.queueLength,
        vipOccupancy: Math.round((zoneStats.vip.occupied / (zoneStats.vip.occupied + zoneStats.vip.available)) * 100) || 0,
        regularOccupancy: Math.round((zoneStats.regular.occupied / (zoneStats.regular.occupied + zoneStats.regular.available)) * 100) || 0,
        zonesOccupancy: Math.round(
          ((zones.vipZone.capacity - zones.vipZone.availableSlots) +
            (zones.regularZone.capacity - zones.regularZone.availableSlots)) /
          (zones.vipZone.capacity + zones.regularZone.capacity) * 100
        )
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º VIP –∑–æ–Ω—É
      const vipOrders = activeOrders.value.filter(order =>
        order.isVipCustomer && order.status !== 'served'
      );

      zones.vipZone = {
        name: 'VIP –∑–æ–Ω–∞',
        tables: Array.from({ length: 5 }, (_, index) => {
          const tableNumber = index + 1; // –°—Ç–æ–ª—ã 1-5 –¥–ª—è VIP
          // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Å—Ç–æ–ª–∞–º
          const ordersAtTable = vipOrders.filter((_, orderIndex) =>
            orderIndex % 5 === index
          );

          return {
            number: tableNumber,
            isOccupied: ordersAtTable.length > 0,
            orderIds: ordersAtTable.map(o => o.orderId.toString()),
            orders: ordersAtTable
          };
        }),
        capacity: 5,
        availableSlots: Math.max(0, 5 - Math.ceil(vipOrders.length / 5))
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∑–æ–Ω—É
      const regularOrders = activeOrders.value.filter(order =>
        !order.isVipCustomer && order.status !== 'served'
      );

      const regularTables = Array.from({ length: 10 }, (_, index) => {
        const tableNumber = index + 6; // –°—Ç–æ–ª—ã 6-15 –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–æ–Ω—ã
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —Å—Ç–æ–ª–∞–º
        const ordersAtTable = regularOrders.filter((_, orderIndex) =>
          orderIndex % 10 === index
        );

        return {
          number: tableNumber,
          isOccupied: ordersAtTable.length > 0,
          orderIds: ordersAtTable.map(o => o.orderId.toString()),
          orders: ordersAtTable
        };
      });

      console.log('üîç DEBUG: –°–æ–∑–¥–∞–Ω–æ —Å—Ç–æ–ª–æ–≤ –≤ –æ–±—ã—á–Ω–æ–π –∑–æ–Ω–µ:', regularTables.length, '–ù–æ–º–µ—Ä–∞:', regularTables.map(t => t.number));

      zones.regularZone = {
        name: '–û–±—ã—á–Ω–∞—è –∑–æ–Ω–∞',
        tables: regularTables,
        capacity: 10,
        availableSlots: Math.max(0, 10 - Math.ceil(regularOrders.length / 10))
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  function createTestOrderData() {
    const orderNumber = Date.now() % 10000;
    const isVip = Math.random() > 0.7; // 30% VIP –∑–∞–∫–∞–∑–æ–≤

    const dishes = ['–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å—Å–∏–∫', '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', '–°—É–ø –¥–Ω—è', '–°—Ç–µ–π–∫', '–ü–∞—Å—Ç–∞'];
    const dishDescription = dishes[Math.floor(Math.random() * dishes.length)];

    return {
      orderNumber,
      isVipCustomer: isVip,
      dishDescription,
      status: 'pending' as const,
      estimatedCompletionTime: new Date(Date.now() + (15 + Math.random() * 30) * 60000) // 15-45 –º–∏–Ω
    };
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
   */
  function startRestaurant() {
    if (isActive.value) return;

    isActive.value = true;
    console.log('üè™ –î–ó-3: –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞');

    // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã
    const orderInterval = setInterval(async () => {
      if (!isActive.value) {
        clearInterval(orderInterval);
        return;
      }

      try {
        const testOrderData = createTestOrderData();
        await p_restaurantAPI.addOrder(testOrderData);

        // –ò–Ω–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤
        if (Math.random() > 0.7) {
          const pendingOrders = await p_restaurantAPI.getOrdersByStatus('pending');

          if (pendingOrders.length > 0) {
            const randomOrder = pendingOrders[Math.floor(Math.random() * pendingOrders.length)];
            await p_restaurantAPI.changeOrderStatus(randomOrder.orderId, 'preparing');

            // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
            setTimeout(async () => {
              if (Math.random() > 0.3) {
                await p_restaurantAPI.changeOrderStatus(randomOrder.orderId, 'served');
              }
            }, 5000 + Math.random() * 10000);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
      }
    }, 2000 + Math.random() * 3000); // –ó–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–µ 2-5 —Å–µ–∫—É–Ω–¥

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    p_updateInterval.value = setInterval(updateState, 500) as any;
    updateState();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  function stopRestaurant() {
    if (!isActive.value) return;

    isActive.value = false;
    console.log('üîí –î–ó-3: –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (p_updateInterval.value) {
      clearInterval(p_updateInterval.value);
      p_updateInterval.value = null;
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ Vue
    activeOrders.value = [];
    recentEvents.value = [];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–æ–Ω—ã
    zones.vipZone = {
      name: 'VIP –∑–æ–Ω–∞',
      tables: [],
      capacity: 5,
      availableSlots: 5
    };
    zones.regularZone = {
      name: '–û–±—ã—á–Ω–∞—è –∑–æ–Ω–∞',
      tables: [],
      capacity: 10,
      availableSlots: 10
    };

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    Object.assign(statistics, {
      totalOrders: 0,
      vipOrders: 0,
      completedOrders: 0,
      eventsLogged: 0,
      zonesOccupancy: 0,
      vipQueueLength: 0,
      regularQueueLength: 0
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
   */
  async function createManualOrder(isVip: boolean = false, description: string = '–û—Å–æ–±—ã–π –∑–∞–∫–∞–∑') {
    try {
      const orderData = createTestOrderData();
      orderData.isVipCustomer = isVip;
      orderData.dishDescription = description;

      const order = await p_restaurantAPI.addOrder(orderData);
      await updateState();

      return order;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∑–æ–Ω–µ
   */
  function getOrdersByZone(zoneName: string): IRestaurantOrder[] {
    const zone = zoneName === 'VIP –∑–æ–Ω–∞' ? zones.vipZone : zones.regularZone;
    const orderIds = zone.tables.flatMap(table => table.orderIds);

    return activeOrders.value.filter(order => orderIds.includes(order.orderId.toString()));
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  function clearRestaurant() {
    stopRestaurant();
    p_kitchenLog.clearAll();
    p_restaurantAPI.clearAll();

    // –°–±—Ä–æ—Å –∑–æ–Ω
    zones.vipZone = {
      name: 'VIP –∑–æ–Ω–∞',
      tables: [],
      capacity: 5,
      availableSlots: 5
    };
    zones.regularZone = {
      name: '–û–±—ã—á–Ω–∞—è –∑–æ–Ω–∞',
      tables: [],
      capacity: 10,
      availableSlots: 10
    };

    // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    activeOrders.value = [];
    recentEvents.value = [];
    Object.assign(statistics, {
      totalOrders: 0,
      vipOrders: 0,
      completedOrders: 0,
      eventsLogged: 0,
      zonesOccupancy: 0,
      vipQueueLength: 0,
      regularQueueLength: 0
    });

    console.log('üßπ –î–ó-3: –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞');
  }

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onUnmounted(() => {
    stopRestaurant();
  });

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isActive,
    zones,
    recentEvents,
    activeOrders,
    statistics,

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    startRestaurant,
    stopRestaurant,
    createManualOrder,
    clearRestaurant,

    // –£—Ç–∏–ª–∏—Ç—ã
    getOrdersByZone,
    updateState
  };
} 